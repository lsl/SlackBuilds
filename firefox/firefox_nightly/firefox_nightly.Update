#!/bin/bash

# Checks for Firefox Nightly updates, if available creates a new package
# and updates the system via upgradepkg 
# Anyone can freely modify and/or distribute this script without restrictions
#
# Written by Luke Williams ( xocel@iquidus.org )

# Note: This script must be run from the same directory firefox_nightly.SlackBuild
#       is located in.

PRGNAM="firefox_nightly"
SRCURL="http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/"
ARCH='' # Leave empty to auto detect

# Automatically determine the architecture
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) ARCH=$( uname -m ) ;;
  esac
fi

# Set LIBDIRSUFFIX and TARBALL. 
if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
  SRCARCH="x86_64"
else
  LIBDIRSUFFIX=""
  SRCARCH="i686"
fi

CWD=`pwd` #Current Working Directory
CONFIG="$CWD/firefox_nightly.Update.conf"
# Create temp dir 
TEMP=$(mktemp -d /tmp/$PRGNAM.XXXXXX)
TEMPDIR="${TEMP%\\n}" #chomp new line character 
# Get index
wget -q $SRCURL -P $TEMPDIR

# Determine latest tarball
LATEST_TEXT=$(grep -o "firefox.*linux-$ARCH\.txt\"" "$TEMPDIR/index.html" | tail -n 1 | tr "\"" "\n" | head -n 1)
wget -q "${SRCURL}${LATEST_TEXT}" -P $TEMPDIR
LATEST_BUILD=$(head -n 1 "$TEMPDIR/$LATEST_TEXT")
LATEST_VERSION=$(basename $(echo $LATEST_TEXT | cut -f 2 -d -) .en)
UPGRADE=0
INSTALLED=0
# Check for current install
ls /var/log/packages/${PRGNAM}-* > /dev/null 2>&1
if [ $? -eq 0 ]; then
	# Determine currently installed package details.
	CURRENT_PKG=$(basename $(ls /var/log/packages/${PRGNAM}-*)) 
    CURRENT_VER=$(echo $CURRENT_PKG | cut -f 2 -d - | tr "_" "\n" | head -n 1)
	CURRENT_INSTALL="/usr/lib${LIBDIRSUFFIX}/${PRGNAM}-${CURRENT_VER}"
	CURRENT_BUILD=$(grep BuildID "$CURRENT_INSTALL/application.ini" | sed 's#BuildID=##g')
	INSTALLED=1
	if [ $LATEST_BUILD -gt $CURRENT_BUILD ]; then
		UPGRADE=1
		echo "A newer build of Firefox Nightly is available (${LATEST_BUILD})"
	else
		echo "Firefox Nightly (${LATEST_BUILD}) is up to date."
		exit 0
	fi
fi

if [ -e $CONFIG ]; then
	rm $CONFIG
fi
echo $LATEST_VERSION >> $CONFIG
echo $LATEST_BUILD >> $CONFIG

# Clean up 
rm -rf $TEMPDIR

if [  $UPGRADE -eq 1 ]; then
	echo "Executing ${PRGNAM}.SlackBuild to build the latest package (${LATEST_BUILD})"
	NEWPKG=$(./${PRGNAM}.SlackBuild | tail -n 2 | head -n 1 | cut -f 3 -d " ")
	# Kill Firefox Nightly if its running
	PID=$(pidof ${PRGNAM})
	if [ $? -eq 0 ]; then
		echo "Firefox Nightly is currently running"
		echo "Killing process ($PID)"
		kill -9 $PID
		if [ $? -ne 0 ]; then 
			echo "Could not kill process $PID"
			echo "Can not continue, aborting."
			exit 1
		fi
	fi

	# Upgrade package
	echo "Executing upgradepkg"
	/sbin/upgradepkg ${CURRENT_PKG}%${NEWPKG}
fi

